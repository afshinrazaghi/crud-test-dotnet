// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Mc2.CrudTest.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("user can apply CRUD operations against the customers")]
    public partial class UserCanApplyCRUDOperationsAgainstTheCustomersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CustomerCRUD.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "user can apply CRUD operations against the customers", "\"\"\"\r\nCustomer (\r\n\tFirstName,\r\n\tLastName,\r\n\tPhoneNumber,\r\n\tEmail,\r\n\tBankAccountNum" +
                    "ber,\r\n\tDateOfBirth\r\n)\r\n\"\"\"", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User Can Create, Edit, Delete And Read Customers")]
        public virtual void UserCanCreateEditDeleteAndReadCustomers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User Can Create, Edit, Delete And Read Customers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
 testRunner.Given("PlatForm has \"0\" record of customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table7.AddRow(new string[] {
                            "jane",
                            "doe",
                            "+989050647735",
                            "jane.doe@gmail.com",
                            "NL20INGB0001234567",
                            "12-JUN-1990"});
#line 16
 testRunner.When("user send command to create new customer with following information", ((string)(null)), table7, "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table8.AddRow(new string[] {
                            "jane",
                            "doe",
                            "+989050647735",
                            "jane.doe@gmail.com",
                            "NL20INGB0001234567",
                            "12-JUN-1990"});
#line 19
 testRunner.Then("user send query and receive \"1\" record of customer with following information", ((string)(null)), table8, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table9.AddRow(new string[] {
                            "john",
                            "smith",
                            "+989050327735",
                            "john.smith@gmail.com",
                            "NL91ABNA0417164300",
                            "12-JUL-1994"});
#line 23
 testRunner.When("user send command to update existing customer with email of \"jane.doe@gmail.com\" " +
                        "with following information", ((string)(null)), table9, "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table10.AddRow(new string[] {
                            "john",
                            "smith",
                            "+989050327735",
                            "john.smith@gmail.com",
                            "NL91ABNA0417164300",
                            "12-JUL-1994"});
#line 26
 testRunner.Then("user send query and receive \"1\" record of customer with following information", ((string)(null)), table10, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table11.AddRow(new string[] {
                            "john",
                            "smith",
                            "+313123355239",
                            "john.smith@gmail.com",
                            "NL91ABNA0417164300",
                            "12-JUL-1994"});
#line 29
 testRunner.And("user send query and receive \"0\" record of customer with following information", ((string)(null)), table11, "And ");
#line hidden
#line 33
 testRunner.When("user send a command to delete existing customer with email of \"john.smith@gmail.c" +
                        "om\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then("user send a query to get all customers and receive \"0\" record of customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
