// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Mc2.CrudTest.AcceptanceTests.Features.BlazorClient
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("user can apply CURD operations against browser")]
    public partial class UserCanApplyCURDOperationsAgainstBrowserFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CustomerClientCRUD.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/BlazorClient", "user can apply CURD operations against browser", "\"\"\"\r\nCustomer(\r\n\tFirstName,\r\n\tLastName,\r\n\tPhoneNumber,\r\n\tEmail,\r\n\tBankAccountNumb" +
                    "er,\r\n\tDateOfBirth\r\n)\r\n\"\"\"", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User Can Create, Edit, Delete And Read Customer From Client")]
        [NUnit.Framework.CategoryAttribute("CRUDCustomerSuccessfully")]
        public virtual void UserCanCreateEditDeleteAndReadCustomerFromClient()
        {
            string[] tagsOfScenario = new string[] {
                    "CRUDCustomerSuccessfully"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User Can Create, Edit, Delete And Read Customer From Client", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
 testRunner.Given("user is on the customers list page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.When("user clicks on the create button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then("user should navigate to \"/createCustomer\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table1.AddRow(new string[] {
                            "jane",
                            "doe",
                            "+989050647735",
                            "jane.doe@gmail.com",
                            "NL20INGB0001234567",
                            "12-04-1990"});
#line 23
 testRunner.When("user fill in the customer details with following information", ((string)(null)), table1, "When ");
#line hidden
#line 26
 testRunner.And("user submit the customer create form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.Then("user should see success notification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.And("user should navigate to \"/customers\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table2.AddRow(new string[] {
                            "jane",
                            "doe",
                            "+989050647735",
                            "jane.doe@gmail.com",
                            "NL20INGB0001234567",
                            "12-04-1990"});
#line 29
 testRunner.And("user should see 1 record of customer with following information in customers list" +
                        " page", ((string)(null)), table2, "And ");
#line hidden
#line 33
 testRunner.When("user clicks on edit button for user with email of \'jane.doe@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then("user should navigate to \"/editCustomer/jane.doe@gmail.com\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table3.AddRow(new string[] {
                            "john",
                            "smith",
                            "+989050327735",
                            "john.smith@gmail.com",
                            "NL91ABNA0417164300",
                            "12-02-1994"});
#line 36
 testRunner.When("user fill in customer details with following information", ((string)(null)), table3, "When ");
#line hidden
#line 39
 testRunner.And("user submit the customer update form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.Then("user should see success notification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.And("user should navigate to \"/customers\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table4.AddRow(new string[] {
                            "john",
                            "smith",
                            "+989050327735",
                            "john.smith@gmail.com",
                            "NL91ABNA0417164300",
                            "12-02-1994"});
#line 42
 testRunner.And("user should see 1 record of customer with following information in customers list" +
                        " page", ((string)(null)), table4, "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table5.AddRow(new string[] {
                            "jane",
                            "doe",
                            "+989050647735",
                            "jane.doe@gmail.com",
                            "NL20INGB0001234567",
                            "12-04-1990"});
#line 45
 testRunner.And("user should see 0 record of customer with following information in customers list" +
                        " page", ((string)(null)), table5, "And ");
#line hidden
#line 49
 testRunner.When("user clicks on remove button for user with email of \'john.smith@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then("user should see a \"confirm dialog\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.When("user clicks on \"Ok\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.Then("user should see \"successfull dialog\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.When("user clicks on \"Ok\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table6.AddRow(new string[] {
                            "john",
                            "smith",
                            "+989050327735",
                            "john.smith@gmail.com",
                            "NL91ABNA0417164300",
                            "12-02-1994"});
#line 54
 testRunner.Then("user should see 0 record of customer with the following information on customers " +
                        "list page", ((string)(null)), table6, "Then ");
#line hidden
#line 57
 testRunner.And("user should see \"No Records Found\" text on customers list page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
